    .assume adl=1

; core.h
    .ref _core_reg_v

; video.h
    .def _video_clear
    .def _video_sprite
    .def _video_blit_1x
    .def _video_blit_2x
    .def _video_blit_3x
    .def _video_blit_4x
    .def _video_blit_5x
    .def _video_blit_1_5x
    .def _video_palette_marker_base
    .def _video_palette_markers_low
    .def _video_palette_markers_high
    .ref _video_memory
    .ref _video_sprite_x
    .ref _video_sprite_y
    .ref _video_sprite_h
    .ref _video_sprite_buffer
    .ref _video_blit_dest

    .ref _dbg_Debugger

_video_clear:
    push bc
    push de
    ld bc, 2047
    ld hl, _video_memory
    ld de, hl
    inc de
    .db $36
_video_clear_pal:
    .db $00
    ldir
    pop de
    pop bc
    ret

; The dreaded sprite routine. This is not very fast, but it's still faster than
; an implementation in C (hopefully)
_video_sprite:
    push ix                 ; save legit everything
    push iy
    push bc
    push de
    push hl
    ld ix, _video_sprite_x
    ld l, (ix)              ; l now contains the sprite's x position
    ld a, 63
    cp a, l                 ; check if x is greater or equal to 63
    jp m, _video_sprite_end ; m flag set if x is such - no need to draw
    ld c, l                 ; save the x position to c
    ld ix, _video_sprite_y
    ld l, (ix)              ; l now contains the sprite's y position
    ld b, l                 ; copy it to b - l will be trashed later on
    ld a, 31
    sub a, l                ; calculate remaining rows. also works as a comparison. a now contains the number of rows left.
    jp m, _video_sprite_end ; m flag set if y is invalid - no need to draw
    inc a                   ; mitigates off-by-one error
    ld ix, _video_sprite_h
    ld l, (ix)              ; l now contains the sprite's height
    cp a, l                 ; check if height needs to be clipped - sign bit set if so
    jp m, _video_sprite_badheight ; disregard the requested height and just use what's left
    ld a, l                 ; since we can, use the requested height
_video_sprite_badheight:
    ld h, 64
    ld l, b
    mlt hl                  ; calculate row offset by 64 * y
    ld de, _video_memory
    add hl, de              ; add it to hl
    ld de, 0
    ld e, c                 ; load x position into de
    add hl, de              ; add it to hl (now contains the sprite write addr)
    ld b, a                 ; put the number of rows into b
    ld d, c
    ld c, 0
    ld iy, _video_sprite_buffer
    ld ix, _core_reg_v+15
    ; at this point:
    ;   - hl contains a pointer to the destination memory (vram)
    ;   - b contains the amount of rows to draw
    ;   - c contains the x offset (currently 0)
    ;   - d contains a static copy of the x offset
    ;   - ix contains a pointer to the clear target (V[0xF])
    ;   - iy contains a pointer to the source memory (will be buffered later)
    ;   - a will be used as a scratchpad for comparisons
_video_sprite_xloop:
    ld c, d
_video_palette_marker_base:
    ; The following assembly (_video_sprite_bit_0 -> _video_sprite_xend) was
    ; generated by scripts/generate_sprite.py.
    ; The code is fairly weird looking, so I will describe it as best I can. 
    ; As a preliminary note, palette shifting is done in an extremely weird way.
    ; To save on registers here, palette values are hard-coded, but are still
    ; able to be changed. How is this possible? Well, every time a palette
    ; value is loaded into the video memory, it references an instruction's immediate,
    ; typically either 0 or 255 (on or off). If we keep track of every instance
    ; of either byte, we can use the Z80's potential for self-modifying-code
    ; to actually update these values in place. I accomplished this by marking
    ; each instance of these "palette bytes" with labels: e.g. _video_sprite_bit_x_pal_x.
    ; You'll see that these are always in front of a $00 or $FF. They are in
    ; actuality located in the middle of instructions. However, since you can't
    ; normally place a label right in the middle of an instruction, I had to
    ; look up the binary encoding of each one and write it out manually, which
    ; is why you see so many .db bytes. For reference, every $3E $XX is a
    ; ld a, $XX, and every $36 $XX is a ld (hl), $XX. To change the colors,
    ; the list of palette labels is referenced from slower C code which goes
    ; through all of them and sets the byte that they reference to the desired
    ; palette value. As an added optimization, they are kept to 2 bytes each by
    ; storing only their offset from _video_palette_marker_base.
    ; Now that palette shifting has been described, I'll quickly show how the 
    ; (slow!) drawing algorithm works. First it takes the x-th bit of the y-th
    ; row of source memory (source memory in iy, rows left in b). If the source
    ; bit is low and the destination bit is low (destination pointed to by hl),
    ; (hl) is loaded with low. If the source bit is low and the destination is
    ; high, (hl) is loaded with high. If the source bit is high and the
    ; destination is low, (hl) is loaded with high. If the source bit is high
    ; and the destination is high, (hl) is loaded with low, and the flags
    ; register (pointed to by iy) is set to 1. It then checks to see if the x-
    ; coordinate is 64, in which case it skips the current line by fast-forwarding
    ; the destination pointer and jumping to the end (all of the inc hl's). If
    ; not, the next bit is processed. At the end of each x row, the rows left
    ; (stored in b) is decremented, unless it is zero, in which case the routine
    ; is finished.
_video_sprite_bit_0:
    bit 7, (iy)
    jr nz, _video_sprite_bit_0_s1
_video_sprite_bit_0_s0:
    .db $3E
_video_sprite_bit_0_pal_0:
    .db $00
    cp a, (hl)
    jr nz, _video_sprite_bit_0_s0_d1
_video_sprite_bit_0_s0_d0:
    .db $36
_video_sprite_bit_0_pal_1:
    .db $00
    jr _video_sprite_bit_0_end
_video_sprite_bit_0_s0_d1:
    .db $36
_video_sprite_bit_0_pal_2:
    .db $FF
    jr _video_sprite_bit_0_end
_video_sprite_bit_0_s1:
    .db $3E
_video_sprite_bit_0_pal_3:
    .db $00
    cp a, (hl)
    jr nz, _video_sprite_bit_0_s1_d1
_video_sprite_bit_0_s1_d0:
    .db $36
_video_sprite_bit_0_pal_4:
    .db $FF
    jr _video_sprite_bit_0_end
_video_sprite_bit_0_s1_d1:
    .db $36
_video_sprite_bit_0_pal_5:
    .db $00
    ld a, 1
    ld (ix), a
_video_sprite_bit_0_end:
    ld a, 64
    inc c
    cp a, c
    jr nz, _video_sprite_bit_0_continue
    xor a
    inc hl
    inc hl
    inc hl
    inc hl
    inc hl
    inc hl
    inc hl
    inc hl
    jp _video_sprite_xend
_video_sprite_bit_0_continue:
    xor a
    inc hl
_video_sprite_bit_1:
    bit 6, (iy)
    jr nz, _video_sprite_bit_1_s1
_video_sprite_bit_1_s0:
    .db $3E
_video_sprite_bit_1_pal_0:
    .db $00
    cp a, (hl)
    jr nz, _video_sprite_bit_1_s0_d1
_video_sprite_bit_1_s0_d0:
    .db $36
_video_sprite_bit_1_pal_1:
    .db $00
    jr _video_sprite_bit_1_end
_video_sprite_bit_1_s0_d1:
    .db $36
_video_sprite_bit_1_pal_2:
    .db $FF
    jr _video_sprite_bit_1_end
_video_sprite_bit_1_s1:
    .db $3E
_video_sprite_bit_1_pal_3:
    .db $00
    cp a, (hl)
    jr nz, _video_sprite_bit_1_s1_d1
_video_sprite_bit_1_s1_d0:
    .db $36
_video_sprite_bit_1_pal_4:
    .db $FF
    jr _video_sprite_bit_1_end
_video_sprite_bit_1_s1_d1:
    .db $36
_video_sprite_bit_1_pal_5:
    .db $00
    ld a, 1
    ld (ix), a
_video_sprite_bit_1_end:
    ld a, 64
    inc c
    cp a, c
    jr nz, _video_sprite_bit_1_continue
    xor a
    inc hl
    inc hl
    inc hl
    inc hl
    inc hl
    inc hl
    inc hl
    jp _video_sprite_xend
_video_sprite_bit_1_continue:
    xor a
    inc hl
_video_sprite_bit_2:
    bit 5, (iy)
    jr nz, _video_sprite_bit_2_s1
_video_sprite_bit_2_s0:
    .db $3E
_video_sprite_bit_2_pal_0:
    .db $00
    cp a, (hl)
    jr nz, _video_sprite_bit_2_s0_d1
_video_sprite_bit_2_s0_d0:
    .db $36
_video_sprite_bit_2_pal_1:
    .db $00
    jr _video_sprite_bit_2_end
_video_sprite_bit_2_s0_d1:
    .db $36
_video_sprite_bit_2_pal_2:
    .db $FF
    jr _video_sprite_bit_2_end
_video_sprite_bit_2_s1:
    .db $3E
_video_sprite_bit_2_pal_3:
    .db $00
    cp a, (hl)
    jr nz, _video_sprite_bit_2_s1_d1
_video_sprite_bit_2_s1_d0:
    .db $36
_video_sprite_bit_2_pal_4:
    .db $FF
    jr _video_sprite_bit_2_end
_video_sprite_bit_2_s1_d1:
    .db $36
_video_sprite_bit_2_pal_5:
    .db $00
    ld a, 1
    ld (ix), a
_video_sprite_bit_2_end:
    ld a, 64
    inc c
    cp a, c
    jr nz, _video_sprite_bit_2_continue
    xor a
    inc hl
    inc hl
    inc hl
    inc hl
    inc hl
    inc hl
    jp _video_sprite_xend
_video_sprite_bit_2_continue:
    xor a
    inc hl
_video_sprite_bit_3:
    bit 4, (iy)
    jr nz, _video_sprite_bit_3_s1
_video_sprite_bit_3_s0:
    .db $3E
_video_sprite_bit_3_pal_0:
    .db $00
    cp a, (hl)
    jr nz, _video_sprite_bit_3_s0_d1
_video_sprite_bit_3_s0_d0:
    .db $36
_video_sprite_bit_3_pal_1:
    .db $00
    jr _video_sprite_bit_3_end
_video_sprite_bit_3_s0_d1:
    .db $36
_video_sprite_bit_3_pal_2:
    .db $FF
    jr _video_sprite_bit_3_end
_video_sprite_bit_3_s1:
    .db $3E
_video_sprite_bit_3_pal_3:
    .db $00
    cp a, (hl)
    jr nz, _video_sprite_bit_3_s1_d1
_video_sprite_bit_3_s1_d0:
    .db $36
_video_sprite_bit_3_pal_4:
    .db $FF
    jr _video_sprite_bit_3_end
_video_sprite_bit_3_s1_d1:
    .db $36
_video_sprite_bit_3_pal_5:
    .db $00
    ld a, 1
    ld (ix), a
_video_sprite_bit_3_end:
    ld a, 64
    inc c
    cp a, c
    jr nz, _video_sprite_bit_3_continue
    xor a
    inc hl
    inc hl
    inc hl
    inc hl
    inc hl
    jp _video_sprite_xend
_video_sprite_bit_3_continue:
    xor a
    inc hl
_video_sprite_bit_4:
    bit 3, (iy)
    jr nz, _video_sprite_bit_4_s1
_video_sprite_bit_4_s0:
    .db $3E
_video_sprite_bit_4_pal_0:
    .db $00
    cp a, (hl)
    jr nz, _video_sprite_bit_4_s0_d1
_video_sprite_bit_4_s0_d0:
    .db $36
_video_sprite_bit_4_pal_1:
    .db $00
    jr _video_sprite_bit_4_end
_video_sprite_bit_4_s0_d1:
    .db $36
_video_sprite_bit_4_pal_2:
    .db $FF
    jr _video_sprite_bit_4_end
_video_sprite_bit_4_s1:
    .db $3E
_video_sprite_bit_4_pal_3:
    .db $00
    cp a, (hl)
    jr nz, _video_sprite_bit_4_s1_d1
_video_sprite_bit_4_s1_d0:
    .db $36
_video_sprite_bit_4_pal_4:
    .db $FF
    jr _video_sprite_bit_4_end
_video_sprite_bit_4_s1_d1:
    .db $36
_video_sprite_bit_4_pal_5:
    .db $00
    ld a, 1
    ld (ix), a
_video_sprite_bit_4_end:
    ld a, 64
    inc c
    cp a, c
    jr nz, _video_sprite_bit_4_continue
    xor a
    inc hl
    inc hl
    inc hl
    inc hl
    jp _video_sprite_xend
_video_sprite_bit_4_continue:
    xor a
    inc hl
_video_sprite_bit_5:
    bit 2, (iy)
    jr nz, _video_sprite_bit_5_s1
_video_sprite_bit_5_s0:
    .db $3E
_video_sprite_bit_5_pal_0:
    .db $00
    cp a, (hl)
    jr nz, _video_sprite_bit_5_s0_d1
_video_sprite_bit_5_s0_d0:
    .db $36
_video_sprite_bit_5_pal_1:
    .db $00
    jr _video_sprite_bit_5_end
_video_sprite_bit_5_s0_d1:
    .db $36
_video_sprite_bit_5_pal_2:
    .db $FF
    jr _video_sprite_bit_5_end
_video_sprite_bit_5_s1:
    .db $3E
_video_sprite_bit_5_pal_3:
    .db $00
    cp a, (hl)
    jr nz, _video_sprite_bit_5_s1_d1
_video_sprite_bit_5_s1_d0:
    .db $36
_video_sprite_bit_5_pal_4:
    .db $FF
    jr _video_sprite_bit_5_end
_video_sprite_bit_5_s1_d1:
    .db $36
_video_sprite_bit_5_pal_5:
    .db $00
    ld a, 1
    ld (ix), a
_video_sprite_bit_5_end:
    ld a, 64
    inc c
    cp a, c
    jr nz, _video_sprite_bit_5_continue
    xor a
    inc hl
    inc hl
    inc hl
    jp _video_sprite_xend
_video_sprite_bit_5_continue:
    xor a
    inc hl
_video_sprite_bit_6:
    bit 1, (iy)
    jr nz, _video_sprite_bit_6_s1
_video_sprite_bit_6_s0:
    .db $3E
_video_sprite_bit_6_pal_0:
    .db $00
    cp a, (hl)
    jr nz, _video_sprite_bit_6_s0_d1
_video_sprite_bit_6_s0_d0:
    .db $36
_video_sprite_bit_6_pal_1:
    .db $00
    jr _video_sprite_bit_6_end
_video_sprite_bit_6_s0_d1:
    .db $36
_video_sprite_bit_6_pal_2:
    .db $FF
    jr _video_sprite_bit_6_end
_video_sprite_bit_6_s1:
    .db $3E
_video_sprite_bit_6_pal_3:
    .db $00
    cp a, (hl)
    jr nz, _video_sprite_bit_6_s1_d1
_video_sprite_bit_6_s1_d0:
    .db $36
_video_sprite_bit_6_pal_4:
    .db $FF
    jr _video_sprite_bit_6_end
_video_sprite_bit_6_s1_d1:
    .db $36
_video_sprite_bit_6_pal_5:
    .db $00
    ld a, 1
    ld (ix), a
_video_sprite_bit_6_end:
    ld a, 64
    inc c
    cp a, c
    jr nz, _video_sprite_bit_6_continue
    xor a
    inc hl
    inc hl
    jp _video_sprite_xend
_video_sprite_bit_6_continue:
    xor a
    inc hl
_video_sprite_bit_7:
    bit 0, (iy)
    jr nz, _video_sprite_bit_7_s1
_video_sprite_bit_7_s0:
    .db $3E
_video_sprite_bit_7_pal_0:
    .db $00
    cp a, (hl)
    jr nz, _video_sprite_bit_7_s0_d1
_video_sprite_bit_7_s0_d0:
    .db $36
_video_sprite_bit_7_pal_1:
    .db $00
    jr _video_sprite_bit_7_end
_video_sprite_bit_7_s0_d1:
    .db $36
_video_sprite_bit_7_pal_2:
    .db $FF
    jr _video_sprite_bit_7_end
_video_sprite_bit_7_s1:
    .db $3E
_video_sprite_bit_7_pal_3:
    .db $00
    cp a, (hl)
    jr nz, _video_sprite_bit_7_s1_d1
_video_sprite_bit_7_s1_d0:
    .db $36
_video_sprite_bit_7_pal_4:
    .db $FF
    jr _video_sprite_bit_7_end
_video_sprite_bit_7_s1_d1:
    .db $36
_video_sprite_bit_7_pal_5:
    .db $00
    ld a, 1
    ld (ix), a
_video_sprite_bit_7_end:
    ld a, 64
    inc c
    cp a, c
    jr nz, _video_sprite_bit_7_continue
    xor a
    inc hl
    jp _video_sprite_xend
_video_sprite_bit_7_continue:
    xor a
    inc hl
_video_sprite_xend:
    push de
    ld de, 56               ; (64 - 8) -- add this to the video memory
    add hl, de              ; skip to the next row
    pop de
    dec b
    inc iy                  ; Next byte in source memory
    jp nz, _video_sprite_xloop
_video_sprite_end:
    pop hl
    pop de
    pop bc
    pop iy
    pop ix
    ret

_video_blit_1x:
    push bc
    push de
    push hl
    ld de, (_video_blit_dest)
    ld hl, _video_memory
    ld a, 32
_video_blit_1x_xloop:
    ld bc, 64
    ldir
    ex hl, de
    push de
    ld de, 256
    add hl, de
    pop de
    ex hl, de
    dec a
    jr nz, _video_blit_1x_xloop
    pop hl
    pop de
    pop bc
    ret

_video_blit_2x:
    push bc
    push de
    push hl
    ld de, (_video_blit_dest)
    ld hl, _video_memory
    ld a, 64
_video_blit_2x_yloop:
    ld bc, 128
_video_blit_2x_xloop: ; proud of this bad boy
    ldi
    dec hl
    ldi
    ldi
    dec hl
    ldi
    ldi
    dec hl
    ldi
    ldi
    dec hl
    ldi
    ldi
    dec hl
    ldi
    ldi
    dec hl
    ldi
    ldi
    dec hl
    ldi
    ldi
    dec hl
    ldi
    jr pe, _video_blit_2x_xloop
    push hl
    ld hl, de
    ld de, 192
    add hl, de
    ld de, hl
    pop hl
    dec a
    bit 0, a
    jp z, _video_blit_2x_xloop_end
    push de
    ld de, 64
    sbc hl, de
    pop de
_video_blit_2x_xloop_end:
    ;push hl
    ;call _dbg_Debugger
    ;pop hl
    cp a, 0
    jr nz, _video_blit_2x_yloop
_video_blit_2x_end:
    pop hl
    pop de
    pop bc
    ret

_video_blit_3x:
    push bc
    push de
    push hl
    push ix
    ld de, (_video_blit_dest)
    ld hl, _video_memory
    ld a, 96
    ld ixl, 3
_video_blit_3x_yloop:
    ld bc, 192
_video_blit_3x_xloop:
    ldi
    dec hl
    ldi
    dec hl
    ldi
    ldi
    dec hl
    ldi
    dec hl
    ldi
    ldi
    dec hl
    ldi
    dec hl
    ldi
    ldi
    dec hl
    ldi
    dec hl
    ldi
    ldi
    dec hl
    ldi
    dec hl
    ldi
    ldi
    dec hl
    ldi
    dec hl
    ldi
    ldi
    dec hl
    ldi
    dec hl
    ldi
    ldi
    dec hl
    ldi
    dec hl
    ldi
    jr pe, _video_blit_3x_xloop
    push hl
    ld hl, de
    ld de, 128
    add hl, de
    ld de, hl
    pop hl
    dec a
    dec ixl
    ld ixh, a
    ld a, 0
    cp a, ixl
    ld a, ixh
    jr nz, _video_blit_3x_norm
    ld ixl, 3
    jr _video_blit_3x_xloop_end
_video_blit_3x_norm:
    push de
    ld de, 63
    sbc hl, de
    pop de
_video_blit_3x_xloop_end:
    ;push hl
    ;call _dbg_Debugger
    ;pop hl
    cp a, 0
    jr nz, _video_blit_3x_yloop
_video_blit_3x_end:
    pop ix
    pop hl
    pop de
    pop bc
    ret

_video_blit_4x:
    push bc
    push de
    push hl
    push ix
    ld de, (_video_blit_dest)
    ld hl, _video_memory
    ld a, 128
_video_blit_4x_yloop:
    ld bc, 256
_video_blit_4x_xloop:
    ldi
    dec hl
    ldi
    dec hl
    ldi
    dec hl
    ldi
    ldi
    dec hl
    ldi
    dec hl
    ldi
    dec hl
    ldi
    ldi
    dec hl
    ldi
    dec hl
    ldi
    dec hl
    ldi
    ldi
    dec hl
    ldi
    dec hl
    ldi
    dec hl
    ldi
    jr pe, _video_blit_4x_xloop
    push hl
    ld hl, de
    ld de, 64
    add hl, de
    ld de, hl
    pop hl
    dec a
    ld ixh, a
    and a, 3
    ld a, ixh
    jp z, _video_blit_4x_xloop_end
    push de
    ld de, 64
    sbc hl, de
    pop de
_video_blit_4x_xloop_end:
    ;push hl
    ;call _dbg_Debugger
    ;pop hl
    cp a, 0
    jr nz, _video_blit_4x_yloop
_video_blit_4x_end:
    pop ix
    pop hl
    pop de
    pop bc
    ret

_video_blit_5x:
    push bc
    push de
    push hl
    push ix
    ld de, (_video_blit_dest)
    ld hl, _video_memory
    ld a, 160
    ld ixl, 5
_video_blit_5x_yloop:
    ld bc, 320
_video_blit_5x_xloop:
    ldi                 ; 5
    dec hl              ; 1
    ldi                 ; 5
    dec hl              ; 1
    ldi                 ; 5
    dec hl              ; 1
    ldi                 ; 5
    dec hl              ; 1
    ldi                 ; 5 --> 28 cycles/pixel (nominally). Probably more with wait states.
    ldi
    dec hl
    ldi
    dec hl
    ldi
    dec hl
    ldi
    dec hl
    ldi
    ldi
    dec hl
    ldi
    dec hl
    ldi
    dec hl
    ldi
    dec hl
    ldi
    ldi
    dec hl
    ldi
    dec hl
    ldi
    dec hl
    ldi
    dec hl
    ldi
    jr pe, _video_blit_5x_xloop
    dec a
    dec ixl
    ld ixh, a
    ld a, 0
    cp a, ixl
    ld a, ixh
    jr nz, _video_blit_5x_norm
    ld ixl, 5
    jr _video_blit_5x_xloop_end
_video_blit_5x_norm:
    push de
    ld de, 63
    sbc hl, de
    pop de
_video_blit_5x_xloop_end:
    ;push hl
    ;call _dbg_Debugger
    ;pop hl
    cp a, 0
    jr nz, _video_blit_5x_yloop
_video_blit_5x_end:
    pop ix
    pop hl
    pop de
    pop bc
    ret

_video_blit_1_5x:
    push bc
    push de
    push hl
    push ix
    ld de, (_video_blit_dest)
    ld hl, _video_memory
    ld a, 48
    ld ixl, 2
_video_blit_1_5x_yloop:
    ld bc, 96
_video_blit_1_5x_xloop:
    ldi
    ldi
    dec hl
    ldi
    ldi
    ldi
    dec hl
    ldi
    jr pe, _video_blit_1_5x_xloop
    ld ixh, a
    xor a, a
    dec ixl
    cp a, ixl
    jr nz, _video_blit_1_5x_norm
    ccf
    push de
    ld de, 63
    sbc hl, de
    pop de
    ld ixl, 3
_video_blit_1_5x_norm:
    ld a, ixh
    push hl
    ld hl, de
    ld de, 224
    add hl, de
    ld de, hl
    pop hl
    dec a
    jr nz, _video_blit_1_5x_yloop
_video_blit_1_5x_end:
    pop ix
    pop hl
    pop de
    pop bc
    ret    
    
    
_video_palette_markers_low:
    .dw _video_clear_pal-_video_sprite_bit_0
    .dw _video_sprite_bit_0_pal_0-_video_sprite_bit_0
    .dw _video_sprite_bit_0_pal_1-_video_sprite_bit_0
    .dw _video_sprite_bit_0_pal_3-_video_sprite_bit_0
    .dw _video_sprite_bit_0_pal_5-_video_sprite_bit_0
    .dw _video_sprite_bit_1_pal_0-_video_sprite_bit_0
    .dw _video_sprite_bit_1_pal_1-_video_sprite_bit_0
    .dw _video_sprite_bit_1_pal_3-_video_sprite_bit_0
    .dw _video_sprite_bit_1_pal_5-_video_sprite_bit_0
    .dw _video_sprite_bit_2_pal_0-_video_sprite_bit_0
    .dw _video_sprite_bit_2_pal_1-_video_sprite_bit_0
    .dw _video_sprite_bit_2_pal_3-_video_sprite_bit_0
    .dw _video_sprite_bit_2_pal_5-_video_sprite_bit_0
    .dw _video_sprite_bit_3_pal_0-_video_sprite_bit_0
    .dw _video_sprite_bit_3_pal_1-_video_sprite_bit_0
    .dw _video_sprite_bit_3_pal_3-_video_sprite_bit_0
    .dw _video_sprite_bit_3_pal_5-_video_sprite_bit_0
    .dw _video_sprite_bit_4_pal_0-_video_sprite_bit_0
    .dw _video_sprite_bit_4_pal_1-_video_sprite_bit_0
    .dw _video_sprite_bit_4_pal_3-_video_sprite_bit_0
    .dw _video_sprite_bit_4_pal_5-_video_sprite_bit_0
    .dw _video_sprite_bit_5_pal_0-_video_sprite_bit_0
    .dw _video_sprite_bit_5_pal_1-_video_sprite_bit_0
    .dw _video_sprite_bit_5_pal_3-_video_sprite_bit_0
    .dw _video_sprite_bit_5_pal_5-_video_sprite_bit_0
    .dw _video_sprite_bit_6_pal_0-_video_sprite_bit_0
    .dw _video_sprite_bit_6_pal_1-_video_sprite_bit_0
    .dw _video_sprite_bit_6_pal_3-_video_sprite_bit_0
    .dw _video_sprite_bit_6_pal_5-_video_sprite_bit_0
    .dw _video_sprite_bit_7_pal_0-_video_sprite_bit_0
    .dw _video_sprite_bit_7_pal_1-_video_sprite_bit_0
    .dw _video_sprite_bit_7_pal_3-_video_sprite_bit_0
    .dw _video_sprite_bit_7_pal_5-_video_sprite_bit_0
    .dw 0
    
_video_palette_markers_high:
    .dw _video_sprite_bit_0_pal_2-_video_sprite_bit_0
    .dw _video_sprite_bit_0_pal_4-_video_sprite_bit_0
    .dw _video_sprite_bit_1_pal_2-_video_sprite_bit_0
    .dw _video_sprite_bit_1_pal_4-_video_sprite_bit_0
    .dw _video_sprite_bit_2_pal_2-_video_sprite_bit_0
    .dw _video_sprite_bit_2_pal_4-_video_sprite_bit_0
    .dw _video_sprite_bit_3_pal_2-_video_sprite_bit_0
    .dw _video_sprite_bit_3_pal_4-_video_sprite_bit_0
    .dw _video_sprite_bit_4_pal_2-_video_sprite_bit_0
    .dw _video_sprite_bit_4_pal_4-_video_sprite_bit_0
    .dw _video_sprite_bit_5_pal_2-_video_sprite_bit_0
    .dw _video_sprite_bit_5_pal_4-_video_sprite_bit_0
    .dw _video_sprite_bit_6_pal_2-_video_sprite_bit_0
    .dw _video_sprite_bit_6_pal_4-_video_sprite_bit_0
    .dw _video_sprite_bit_7_pal_2-_video_sprite_bit_0
    .dw _video_sprite_bit_7_pal_4-_video_sprite_bit_0
    .dw 0
